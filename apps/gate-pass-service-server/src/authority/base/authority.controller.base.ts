/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { AuthorityService } from "../authority.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AuthorityCreateInput } from "./AuthorityCreateInput";
import { Authority } from "./Authority";
import { AuthorityFindManyArgs } from "./AuthorityFindManyArgs";
import { AuthorityWhereUniqueInput } from "./AuthorityWhereUniqueInput";
import { AuthorityUpdateInput } from "./AuthorityUpdateInput";
import { GatePassFindManyArgs } from "../../gatePass/base/GatePassFindManyArgs";
import { GatePass } from "../../gatePass/base/GatePass";
import { GatePassWhereUniqueInput } from "../../gatePass/base/GatePassWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class AuthorityControllerBase {
  constructor(
    protected readonly service: AuthorityService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Authority })
  @nestAccessControl.UseRoles({
    resource: "Authority",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createAuthority(
    @common.Body() data: AuthorityCreateInput
  ): Promise<Authority> {
    return await this.service.createAuthority({
      data: data,
      select: {
        createdAt: true,
        email: true,
        id: true,
        name: true,
        role: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Authority] })
  @ApiNestedQuery(AuthorityFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Authority",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async authorities(@common.Req() request: Request): Promise<Authority[]> {
    const args = plainToClass(AuthorityFindManyArgs, request.query);
    return this.service.authorities({
      ...args,
      select: {
        createdAt: true,
        email: true,
        id: true,
        name: true,
        role: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Authority })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Authority",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async authority(
    @common.Param() params: AuthorityWhereUniqueInput
  ): Promise<Authority | null> {
    const result = await this.service.authority({
      where: params,
      select: {
        createdAt: true,
        email: true,
        id: true,
        name: true,
        role: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Authority })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Authority",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateAuthority(
    @common.Param() params: AuthorityWhereUniqueInput,
    @common.Body() data: AuthorityUpdateInput
  ): Promise<Authority | null> {
    try {
      return await this.service.updateAuthority({
        where: params,
        data: data,
        select: {
          createdAt: true,
          email: true,
          id: true,
          name: true,
          role: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Authority })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Authority",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteAuthority(
    @common.Param() params: AuthorityWhereUniqueInput
  ): Promise<Authority | null> {
    try {
      return await this.service.deleteAuthority({
        where: params,
        select: {
          createdAt: true,
          email: true,
          id: true,
          name: true,
          role: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/gatePasses")
  @ApiNestedQuery(GatePassFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "GatePass",
    action: "read",
    possession: "any",
  })
  async findGatePasses(
    @common.Req() request: Request,
    @common.Param() params: AuthorityWhereUniqueInput
  ): Promise<GatePass[]> {
    const query = plainToClass(GatePassFindManyArgs, request.query);
    const results = await this.service.findGatePasses(params.id, {
      ...query,
      select: {
        authority: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        reason: true,
        requestDate: true,
        status: true,

        student: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/gatePasses")
  @nestAccessControl.UseRoles({
    resource: "Authority",
    action: "update",
    possession: "any",
  })
  async connectGatePasses(
    @common.Param() params: AuthorityWhereUniqueInput,
    @common.Body() body: GatePassWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      gatePasses: {
        connect: body,
      },
    };
    await this.service.updateAuthority({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/gatePasses")
  @nestAccessControl.UseRoles({
    resource: "Authority",
    action: "update",
    possession: "any",
  })
  async updateGatePasses(
    @common.Param() params: AuthorityWhereUniqueInput,
    @common.Body() body: GatePassWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      gatePasses: {
        set: body,
      },
    };
    await this.service.updateAuthority({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/gatePasses")
  @nestAccessControl.UseRoles({
    resource: "Authority",
    action: "update",
    possession: "any",
  })
  async disconnectGatePasses(
    @common.Param() params: AuthorityWhereUniqueInput,
    @common.Body() body: GatePassWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      gatePasses: {
        disconnect: body,
      },
    };
    await this.service.updateAuthority({
      where: params,
      data,
      select: { id: true },
    });
  }
}
