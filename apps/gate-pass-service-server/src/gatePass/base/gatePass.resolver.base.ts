/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { GatePass } from "./GatePass";
import { GatePassCountArgs } from "./GatePassCountArgs";
import { GatePassFindManyArgs } from "./GatePassFindManyArgs";
import { GatePassFindUniqueArgs } from "./GatePassFindUniqueArgs";
import { CreateGatePassArgs } from "./CreateGatePassArgs";
import { UpdateGatePassArgs } from "./UpdateGatePassArgs";
import { DeleteGatePassArgs } from "./DeleteGatePassArgs";
import { Authority } from "../../authority/base/Authority";
import { Student } from "../../student/base/Student";
import { GatePassService } from "../gatePass.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => GatePass)
export class GatePassResolverBase {
  constructor(
    protected readonly service: GatePassService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "GatePass",
    action: "read",
    possession: "any",
  })
  async _gatePassesMeta(
    @graphql.Args() args: GatePassCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [GatePass])
  @nestAccessControl.UseRoles({
    resource: "GatePass",
    action: "read",
    possession: "any",
  })
  async gatePasses(
    @graphql.Args() args: GatePassFindManyArgs
  ): Promise<GatePass[]> {
    return this.service.gatePasses(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => GatePass, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "GatePass",
    action: "read",
    possession: "own",
  })
  async gatePass(
    @graphql.Args() args: GatePassFindUniqueArgs
  ): Promise<GatePass | null> {
    const result = await this.service.gatePass(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GatePass)
  @nestAccessControl.UseRoles({
    resource: "GatePass",
    action: "create",
    possession: "any",
  })
  async createGatePass(
    @graphql.Args() args: CreateGatePassArgs
  ): Promise<GatePass> {
    return await this.service.createGatePass({
      ...args,
      data: {
        ...args.data,

        authority: args.data.authority
          ? {
              connect: args.data.authority,
            }
          : undefined,

        student: args.data.student
          ? {
              connect: args.data.student,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GatePass)
  @nestAccessControl.UseRoles({
    resource: "GatePass",
    action: "update",
    possession: "any",
  })
  async updateGatePass(
    @graphql.Args() args: UpdateGatePassArgs
  ): Promise<GatePass | null> {
    try {
      return await this.service.updateGatePass({
        ...args,
        data: {
          ...args.data,

          authority: args.data.authority
            ? {
                connect: args.data.authority,
              }
            : undefined,

          student: args.data.student
            ? {
                connect: args.data.student,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GatePass)
  @nestAccessControl.UseRoles({
    resource: "GatePass",
    action: "delete",
    possession: "any",
  })
  async deleteGatePass(
    @graphql.Args() args: DeleteGatePassArgs
  ): Promise<GatePass | null> {
    try {
      return await this.service.deleteGatePass(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Authority, {
    nullable: true,
    name: "authority",
  })
  @nestAccessControl.UseRoles({
    resource: "Authority",
    action: "read",
    possession: "any",
  })
  async getAuthority(
    @graphql.Parent() parent: GatePass
  ): Promise<Authority | null> {
    const result = await this.service.getAuthority(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Student, {
    nullable: true,
    name: "student",
  })
  @nestAccessControl.UseRoles({
    resource: "Student",
    action: "read",
    possession: "any",
  })
  async getStudent(
    @graphql.Parent() parent: GatePass
  ): Promise<Student | null> {
    const result = await this.service.getStudent(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
