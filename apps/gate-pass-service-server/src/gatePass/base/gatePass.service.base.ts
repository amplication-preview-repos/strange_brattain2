/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  GatePass as PrismaGatePass,
  Authority as PrismaAuthority,
  Student as PrismaStudent,
} from "@prisma/client";

export class GatePassServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.GatePassCountArgs, "select">): Promise<number> {
    return this.prisma.gatePass.count(args);
  }

  async gatePasses(
    args: Prisma.GatePassFindManyArgs
  ): Promise<PrismaGatePass[]> {
    return this.prisma.gatePass.findMany(args);
  }
  async gatePass(
    args: Prisma.GatePassFindUniqueArgs
  ): Promise<PrismaGatePass | null> {
    return this.prisma.gatePass.findUnique(args);
  }
  async createGatePass(
    args: Prisma.GatePassCreateArgs
  ): Promise<PrismaGatePass> {
    return this.prisma.gatePass.create(args);
  }
  async updateGatePass(
    args: Prisma.GatePassUpdateArgs
  ): Promise<PrismaGatePass> {
    return this.prisma.gatePass.update(args);
  }
  async deleteGatePass(
    args: Prisma.GatePassDeleteArgs
  ): Promise<PrismaGatePass> {
    return this.prisma.gatePass.delete(args);
  }

  async getAuthority(parentId: string): Promise<PrismaAuthority | null> {
    return this.prisma.gatePass
      .findUnique({
        where: { id: parentId },
      })
      .authority();
  }

  async getStudent(parentId: string): Promise<PrismaStudent | null> {
    return this.prisma.gatePass
      .findUnique({
        where: { id: parentId },
      })
      .student();
  }
}
