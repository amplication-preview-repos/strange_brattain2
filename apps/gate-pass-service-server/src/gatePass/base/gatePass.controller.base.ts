/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { GatePassService } from "../gatePass.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { GatePassCreateInput } from "./GatePassCreateInput";
import { GatePass } from "./GatePass";
import { GatePassFindManyArgs } from "./GatePassFindManyArgs";
import { GatePassWhereUniqueInput } from "./GatePassWhereUniqueInput";
import { GatePassUpdateInput } from "./GatePassUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class GatePassControllerBase {
  constructor(
    protected readonly service: GatePassService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: GatePass })
  @nestAccessControl.UseRoles({
    resource: "GatePass",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createGatePass(
    @common.Body() data: GatePassCreateInput
  ): Promise<GatePass> {
    return await this.service.createGatePass({
      data: {
        ...data,

        authority: data.authority
          ? {
              connect: data.authority,
            }
          : undefined,

        student: data.student
          ? {
              connect: data.student,
            }
          : undefined,
      },
      select: {
        authority: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        reason: true,
        requestDate: true,
        status: true,

        student: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [GatePass] })
  @ApiNestedQuery(GatePassFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "GatePass",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async gatePasses(@common.Req() request: Request): Promise<GatePass[]> {
    const args = plainToClass(GatePassFindManyArgs, request.query);
    return this.service.gatePasses({
      ...args,
      select: {
        authority: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        reason: true,
        requestDate: true,
        status: true,

        student: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: GatePass })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "GatePass",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async gatePass(
    @common.Param() params: GatePassWhereUniqueInput
  ): Promise<GatePass | null> {
    const result = await this.service.gatePass({
      where: params,
      select: {
        authority: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        reason: true,
        requestDate: true,
        status: true,

        student: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: GatePass })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "GatePass",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateGatePass(
    @common.Param() params: GatePassWhereUniqueInput,
    @common.Body() data: GatePassUpdateInput
  ): Promise<GatePass | null> {
    try {
      return await this.service.updateGatePass({
        where: params,
        data: {
          ...data,

          authority: data.authority
            ? {
                connect: data.authority,
              }
            : undefined,

          student: data.student
            ? {
                connect: data.student,
              }
            : undefined,
        },
        select: {
          authority: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          reason: true,
          requestDate: true,
          status: true,

          student: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: GatePass })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "GatePass",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteGatePass(
    @common.Param() params: GatePassWhereUniqueInput
  ): Promise<GatePass | null> {
    try {
      return await this.service.deleteGatePass({
        where: params,
        select: {
          authority: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          reason: true,
          requestDate: true,
          status: true,

          student: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
